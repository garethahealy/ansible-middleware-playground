name: "Test topologies on release"

on:
  release:
    types: [published]

# Declare default permissions as read only.
permissions: read-all

jobs:
  test_topology:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        topology: [ custom, master-slave ]
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@91182cccc01eb5e619899d80e4e971d6181294a7 # v2.10.1
        with:
          egress-policy: audit

      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4

      - uses: actions/setup-python@f677139bbe7f9c59b41e40162b753c062f5d49a3 # v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Setup python deps
        run: |
          pip3 install -r requirements.txt

      - name: Copy ansible.cfg
        run: cp configure-aws/roles/configure_bootstrap/files/ansible.cfg ~/.ansible.cfg

      - name: Install requirements
        env:
          ANSIBLE_GALAXY_SERVER_AUTOMATION_HUB_TOKEN: ${{ secrets.ANSIBLE_GALAXY_SERVER_AUTOMATION_HUB_TOKEN }}
        run: ansible-galaxy install -r requirements.yml

      - name: Deploy AWS
        id: deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SSH_KEY_VAULT_PASS: ${{ secrets.SSH_KEY_VAULT_PASS }}
        run: |
          pushd configure-aws
          
          echo $SSH_KEY_VAULT_PASS > vault-password.sec
          
          ansible-playbook deploy.yml --skip-tags blank \
            --vault-password-file=vault-password.sec \
            -e SSH_KEY_VAULT_PASS=${SSH_KEY_VAULT_PASS} \
            -e aws_access_key=${AWS_ACCESS_KEY_ID} \
            -e aws_secret_key=${AWS_SECRET_ACCESS_KEY} \
            -e ANSIBLE_GALAXY_SERVER_AUTOMATION_HUB_TOKEN="not-needed"
          
          echo "bootstrap_dns=$(cat inventory/bootstrap.yml | yq '.bootstrap.hosts' | head -c-2)" >> "$GITHUB_OUTPUT"
          
          popd

      - name: Deploy ${{ matrix.topology }}
        env:
          RHN_USERNAME: ${{ secrets.RHN_USERNAME }}
          RHN_PASSWORD: ${{ secrets.RHN_PASSWORD }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          BOOTSTRAP: ${{ steps.deploy.outputs.bootstrap_dns }}
        run: |
          ssh -i configure-aws/roles/configure_bootstrap/files/ec2_keypair.pem ec2-user@${BOOTSTRAP} "
            ansible-playbook -i inventory/${{ matrix.topology }}.yml playbooks/deploy-amq-${{ matrix.topology }}.yml \
              -e rhn_username=${RHN_USERNAME} \
              -e rhn_password=${RHN_PASSWORD} \
              -e aws_access_key=${AWS_ACCESS_KEY_ID} \
              -e aws_secret_key=${AWS_SECRET_ACCESS_KEY}
          "

      - name: Test ${{ matrix.topology }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          BOOTSTRAP: ${{ steps.deploy.outputs.bootstrap_dns }}
        run: |
          ssh -i configure-aws/roles/configure_bootstrap/files/ec2_keypair.pem ec2-user@${BOOTSTRAP} "
            ansible-playbook -i inventory/test.yml playbooks/test-amq-${{ matrix.topology }}.yml \
              -e aws_access_key=${AWS_ACCESS_KEY_ID} \
              -e aws_secret_key=${AWS_SECRET_ACCESS_KEY}
          "

      - name: Remove ${{ matrix.topology }}
        if: always()
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          BOOTSTRAP: ${{ steps.deploy.outputs.bootstrap_dns }}
        run: |
          ssh -i configure-aws/roles/configure_bootstrap/files/ec2_keypair.pem ec2-user@${BOOTSTRAP} "
            ansible-playbook -i inventory/all.yml playbooks/remove-amq.yml \
              -e aws_access_key=${AWS_ACCESS_KEY_ID} \
              -e aws_secret_key=${AWS_SECRET_ACCESS_KEY}
          "
