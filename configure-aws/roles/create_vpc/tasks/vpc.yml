---
- name: Create VPC
  amazon.aws.ec2_vpc_net:
    region: "{{ create_vpc_region }}"
    name: "{{ create_vpc_vpc_name }}"
    cidr_block: "{{ create_vpc_vpc_cidr_block }}"
    dns_support: true
    dns_hostnames: true
    tenancy: default
    state: present
  register: ec2_vpc_net_result

- name: Create Internet Gateway for VPC
  amazon.aws.ec2_vpc_igw:
    region: "{{ create_vpc_region }}"
    vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
    tags:
      Name: "{{ create_vpc_igw_name }}"
    state: present
  register: igw_result

- name: Create VPC Subnet
  amazon.aws.ec2_vpc_subnet:
    region: "{{ create_vpc_region }}"
    vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
    az: "{{ create_vpc_zone }}"
    cidr: "{{ create_vpc_subnet_cidr_block }}"
    map_public: true
    resource_tags:
      Name: "{{ create_vpc_subnet_name }}"
    state: present
  register: subnet_result

- name: Create VPC Public Subnet Route Table
  amazon.aws.ec2_vpc_route_table:
    region: "{{ create_vpc_region }}"
    vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
    tags:
      Name: "{{ create_vpc_route_table_name }}"
    subnets:
      - "{{ subnet_result.subnet.id }}"
    routes:
      - dest: "{{ create_vpc_destination_cidr_block }}"
        gateway_id: "{{ igw_result.gateway_id }}"
    state: present
  register: public_route_table

- name: Get my public IP
  register: ip_output
  community.general.ipify_facts:

- name: Create Security Group
  amazon.aws.ec2_security_group:
    region: "{{ create_vpc_region }}"
    vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
    name: "{{ create_vpc_security_group_name }}"
    description: "{{ create_vpc_security_group_name }}"
    tags:
      Name: "{{ create_vpc_security_group_name }}"
    rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        rule_desc: allow SSH traffic from my laptop
        cidr_ip: "{{ ip_output.ansible_facts.ipify_public_ip }}/32"
      - proto: tcp
        from_port: 8161
        to_port: 8161
        rule_desc: allow AMQ Console traffic from my laptop
        cidr_ip: "{{ ip_output.ansible_facts.ipify_public_ip }}/32"
      - proto: tcp
        from_port: 22
        to_port: 22
        rule_desc: allow SSH traffic within VPC
        cidr_ip: "{{ create_vpc_subnet_cidr_block }}"
      - proto: tcp
        from_port: 8161
        to_port: 8161
        rule_desc: allow AMQ Console traffic within VPC
        cidr_ip: "{{ create_vpc_subnet_cidr_block }}"
      - proto: tcp
        from_port: 61616
        to_port: 61616
        rule_desc: allow AMQ traffic within VPC
        cidr_ip: "{{ create_vpc_subnet_cidr_block }}"
      - proto: tcp
        from_port: 2049
        to_port: 2049
        rule_desc: allow EFS traffic within VPC
        cidr_ip: "{{ create_vpc_subnet_cidr_block }}"
    state: present
  register: security_group_results
