---
- name: Create VPC
  amazon.aws.ec2_vpc_net:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    region: "{{ region }}"
    name: "{{ vpc_name }}"
    cidr_block: "{{ vpc_cidr_block }}"
    dns_support: yes
    dns_hostnames: yes
    tenancy: default
    state: present
  register: ec2_vpc_net_result

- name: Create Internet Gateway for VPC
  amazon.aws.ec2_vpc_igw:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    region: "{{ region }}"
    vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
    state: present
    tags:
      Name: "{{ igw_name }}"
  register: igw_result

- name: Create VPC Subnet
  amazon.aws.ec2_vpc_subnet:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    region: "{{ region }}"
    vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
    az: "{{ zone }}"
    state: present
    cidr: "{{ subnet_cidr_block }}"
    map_public: yes
    resource_tags:
      Name: "{{ subnet_name }}"
  register: subnet_result

- name: Create VPC Public Subnet Route Table
  amazon.aws.ec2_vpc_route_table:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    region: "{{ region }}"
    vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
    state: present
    tags:
      Name: "{{ route_table_name }}"
    subnets: [ "{{ subnet_result.subnet.id }}" ]

    # create routes
    routes:
      - dest: "{{ destination_cidr_block }}"
        gateway_id: "{{ igw_result.gateway_id }}"
  register: public_route_table

- name: Create Security Group
  amazon.aws.ec2_security_group:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    region: "{{ region }}"
    vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
    state: present
    name: "{{ security_group_name }}"
    description: "{{ security_group_name }}"
    tags:
      Name: "{{ security_group_name  }}"
    rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        rule_desc: allow SSH traffic from my laptop
        cidr_ip: "{{ my_ip }}"
      - proto: tcp
        from_port: 8161
        to_port: 8161
        rule_desc: allow AMQ Console traffic from my laptop
        cidr_ip: "{{ my_ip }}"
      - proto: tcp
        from_port: 22
        to_port: 22
        rule_desc: allow SSH traffic within VPC
        cidr_ip: "{{ subnet_cidr_block }}"
      - proto: tcp
        from_port: 8161
        to_port: 8161
        rule_desc: allow AMQ Console traffic within VPC
        cidr_ip: "{{ subnet_cidr_block }}"
      - proto: tcp
        from_port: 61616
        to_port: 61616
        rule_desc: allow AMQ traffic within VPC
        cidr_ip: "{{ subnet_cidr_block }}"
  register: security_group_results

#- name: Create a new EC2 key pair, returns generated private key
#  amazon.aws.ec2_key:
#    aws_access_key: "{{ aws_access_key }}"
#    aws_secret_key: "{{ aws_secret_key }}"
#    region: "{{ region }}"
#    name: my_keypair
#    file_name: my_keypair.pem
#    state: present
#  register: aws_ec2_key_pair

#- name: "Provisioning ec2 instances"
#  amazon.aws.ec2_instance:
#    aws_access_key: "{{ aws_access_key }}"
#    aws_secret_key: "{{ aws_secret_key }}"
#    region: "{{ region }}"
#    name: "{{ item }}"
#    image_id: "{{ image_id }}"
#    instance_type: "{{ instance_type }}"
#    key_name: "my_keypair"
#   vpc_subnet_id: "{{ subnet_result.subnet.id }}"
#   network:
#     assign_public_ip: true
#   security_group: "{{ security_group_results.group_id }}"
#   wait: yes
#   count: 1
#   state: present
# loop: "{{ instances }}"
