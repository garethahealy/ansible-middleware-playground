---
- name: Pip exists
  ansible.builtin.raw: pip --version
  ignore_errors: true
  changed_when: pip_output.rc != 0
  register: pip_output

- name: Ansible exists
  ansible.builtin.raw: ansible --version
  ignore_errors: true
  changed_when: ansible_output.rc != 0
  register: ansible_output

- name: Get pip installer
  ansible.builtin.raw: curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
  when: pip_output.rc != 0
  changed_when: pip_output.rc != 0

- name: Install pip
  ansible.builtin.raw: python3 get-pip.py --user
  when: pip_output.rc != 0
  changed_when: pip_output.rc != 0

- name: Install ansible
  ansible.builtin.raw: python3 -m pip install --user ansible
  when: ansible_output.rc != 0
  changed_when: ansible_output.rc != 0

- name: Ensures /etc/ansible exists
  become: true
  ansible.builtin.file:
    path: /etc/ansible
    mode: "0755"
    state: directory

- name: Copy ansible.cfg
  become: true
  ansible.builtin.copy:
    src: files/ansible.cfg
    dest: /etc/ansible/ansible.cfg
    mode: "0755"

- name: Copy my_keypair.pem to bootstrap
  ansible.builtin.copy:
    src: files/my_keypair.pem
    dest: /home/ec2-user/my_keypair.pem
    mode: "0400"

- name: Install boto3 python package
  ansible.builtin.pip:
    name: boto3

- name: Install collection redhat.amq_broker
  community.general.ansible_galaxy_install:
    type: collection
    name: redhat.amq_broker

- name: Get AMQ nodes
  amazon.aws.ec2_instance_info:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    region: "{{ region }}"
    filters:
      instance-state-name: ["running"]
      "tag:Name": "amq*"
  register: ec2_node_info

- name: Create empty private_dns_names collection
  ansible.builtin.set_fact:
    private_dns_names: []

- name: Add DNS names to private_dns_names collection
  ansible.builtin.set_fact:
    private_dns_names: "{{ private_dns_names + [item.network_interfaces[0].private_dns_name] }}"
  loop: "{{ ec2_node_info.instances }}"

- name: Scan for SSH host keys
  ansible.builtin.shell: ssh-keyscan {{ item }} 2>/dev/null
  register: ssh_scan
  loop: "{{ private_dns_names }}"
  changed_when: false

- name: Update known_hosts
  ansible.builtin.known_hosts:
    name: "{{ item.item }}"
    key: "{{ item.stdout }}"
  loop: "{{ ssh_scan.results }}"

- name: Copy playground inventory
  ansible.builtin.copy:
    src: ../../../inventory
    dest: /home/ec2-user/
    mode: "0755"

- name: Copy playground deploy-amq-clustered.yml
  ansible.builtin.copy:
    src: ../../deploy-amq-clustered.yml
    dest: /home/ec2-user/
    mode: "0755"

- name: Copy playground remove-amq.yml
  ansible.builtin.copy:
    src: ../../remove-amq.yml
    dest: /home/ec2-user/
    mode: "0755"

- name: Get Bootstrap node
  amazon.aws.ec2_instance_info:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    region: "{{ region }}"
    filters:
      instance-state-name: ["running"]
      "tag:Name": "bootstrap"
  register: ec2_bootstrap_node_info

- name: SSH to boostrap
  vars:
    key: "configure_bootstrap/files/my_keypair.pem"
    host: "{{ ec2_bootstrap_node_info.instances[0].network_interfaces[0].association.public_dns_name }}"
  ansible.builtin.debug:
    msg: "ssh -i {{ key }} ec2-user@{{ host }}"
